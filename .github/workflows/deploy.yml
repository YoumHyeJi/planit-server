# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

on:
  push:
    branches:
      - dev
      
name: Deploy Spring boot to Amazon EC2
env:
  PROJECT_NAME: planit-server
  RESOURCE_PATH: ./src/main/resources/application.yml

jobs:
  deploy:
    name: DEPLOY
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      - name: Set yml file 
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          server.port: ${{ secrets.SERVER_PORT }}
          spring.application.name: ${{ secrets.APPLICATION_NAME }}
          spring.datasource.driver-class-name: ${{ secrets.RDS_DRIVER_CLASS }}
          spring.datasource.url: ${{ secrets.RDS_HOST }} 
          spring.datasource.username: ${{ secrets.RDS_USERNAME }} 
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }} 
          spring.mvc.pathmatch.matching-strategy: ${{ secrets.MVC_MATCH_STRATEGY }} 
       

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
        
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://planz-planit-bucket/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name planz_planit --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name dev --s3-location bucket=planz-planit-bucket,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
